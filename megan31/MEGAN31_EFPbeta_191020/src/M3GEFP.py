#!/usr/bin/env python
"""
Module that contains functions related to createing the Grid EF database

Functions include
    run_M3GEFP_DB: Executes the functions and queries to generate the database output for each class
    make_M3GEFP_tables: Create tables based on input CSVs
    Ecotype_*_EF: SQL queries to run the database for the given vegetative class
    make_grid_ef_tables: Load the individual classes back into the database
    concat_grid_ef_tables: Concatenate the individual classes into 1 table

"""
import pandas as pd


def make_M3GEFP_tables(conn, csv_input_dir, Ecotype_Crop, Ecotype_Shrub, Ecotype_Herb, 
                       Ecotype_Tree, grid_ecotype, grid_growth_form, Vegtype_EF_csv_input):

    """

    Function to load CSV inputs to create primary tables of the M3GEFP database
    :param conn: SQLite database connection
    :param csv_input_dir: Directory of CSV inputs
    :param Ecotype_Crop: input csv file name
    :param Ecotype_Shrub: input csv file name
    :param Ecotype_Herb: input csv file name
    :param Ecotype_Tree: input csv file name
    :param grid_ecotype: input csv file name
    :param grid_growth_form: input csv file name
    :param Vegtype_EF_csv_input: Input CSVs generated by running the M3VTEF database
    :return: A SQLite database with primary tables

    """

    print("Creating M3GEFP DB tables from: %s\n" % csv_input_dir)
    csv_Ecotype_Crop_Speciation = pd.read_csv(csv_input_dir + Ecotype_Crop)
    csv_Ecotype_Shrub_Speciation = pd.read_csv(csv_input_dir + Ecotype_Shrub)
    csv_Ecotype_Herb_Speciation = pd.read_csv(csv_input_dir + Ecotype_Herb)
    csv_Ecotype_Tree_Speciation = pd.read_csv(csv_input_dir + Ecotype_Tree)
    csv_grid_ecotype = pd.read_csv(csv_input_dir + grid_ecotype)
    csv_grid_growth_form = pd.read_csv(csv_input_dir + grid_growth_form)
    csv_Vegtype_EF = pd.read_csv(Vegtype_EF_csv_input)
    csv_Vegtype_EF.columns = ['VegID', 'VegEF']

    csv_Ecotype_Crop_Speciation.to_sql("Ecotype Crop Speciation", conn, flavor='sqlite', if_exists='replace')
    print("'Ecotype Crop Speciation' Table Loaded from: %s" % csv_input_dir + Ecotype_Crop)

    csv_Ecotype_Shrub_Speciation.to_sql("Ecotype Shrub Speciation", conn, flavor='sqlite', if_exists='replace')
    print("'Ecotype Shrub Speciation' Table Loaded from: %s" % csv_input_dir + Ecotype_Shrub)

    csv_Ecotype_Herb_Speciation.to_sql("Ecotype Herb Speciation", conn, flavor='sqlite', if_exists='replace')
    print("'Ecotype Herb Speciation' Table Loaded from: %s" % csv_input_dir + Ecotype_Herb)

    csv_Ecotype_Tree_Speciation.to_sql("Ecotype Tree Speciation", conn, flavor='sqlite', if_exists='replace')
    print("'Ecotype Tree Speciation' Table Loaded from: %s" % csv_input_dir + Ecotype_Tree)

    csv_grid_ecotype.to_sql("grid ecotype", conn, flavor='sqlite', if_exists='replace')
    print("'grid ecotype' Table Loaded from: %s" % csv_input_dir + grid_ecotype)

    csv_grid_growth_form.to_sql("grid growth form", conn, flavor='sqlite', if_exists='replace')
    print("'grid growth form' Table Loaded from: %s" % csv_input_dir + grid_growth_form)

    csv_Vegtype_EF.to_sql("Vegtype EF", conn, flavor='sqlite', if_exists='replace')
    print("'Vegtype EF' Table Loaded from: %s" % Vegtype_EF_csv_input)


def Ecotype_Tree_EF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Ecotype Tree EF' AS SELECT 'Ecotype Tree Speciation'.[EcoTypeID] AS [EcoTypeID], "
              "SUM([TreeSpecFrac]*[VegEF]) AS TreeEF "
              "FROM 'Ecotype Tree Speciation' "
              "INNER JOIN 'Vegtype EF' ON 'Ecotype Tree Speciation'.[VegID] = 'Vegtype EF'.[VegID] "
              "GROUP BY 'Ecotype Tree Speciation'.[EcoTypeID];")

    print("'Ecotype Tree EF' Table Created")


def Ecotype_Shrub_EF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Ecotype Shrub EF' AS SELECT 'Ecotype Shrub Speciation'.[EcoTypeID] AS [EcoTypeID], "
              "SUM([ShrubSpecFrac]*[VegEF]) AS ShrubEF "
              "FROM 'Ecotype Shrub Speciation' "
              "INNER JOIN 'Vegtype EF' ON 'Ecotype Shrub Speciation'.[VegID] = 'Vegtype EF'.[VegID] "
              "GROUP BY 'Ecotype Shrub Speciation'.[EcoTypeID];")

    print("'Ecotype Shrub EF' Table Created")


def Ecotype_Herb_EF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Ecotype Herb EF' AS SELECT 'Ecotype Herb Speciation'.[EcoTypeID] AS [EcoTypeID], "
              "SUM([HerbSpecFrac]*[VegEF]) AS HerbEF "
              "FROM 'Ecotype Herb Speciation' "
              "INNER JOIN 'Vegtype EF' ON 'Ecotype Herb Speciation'.[VegID] = 'Vegtype EF'.[VegID] "
              "GROUP BY 'Ecotype Herb Speciation'.[EcoTypeID];")

    print("'Ecotype Herb EF' Table Created")


def Ecotype_Crop_EF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Ecotype Crop EF' AS SELECT 'Ecotype Crop Speciation'.[EcoTypeID] AS [EcoTypeID], "
              "Sum([CropSpecFrac]*[VegEF]) AS CropEF FROM 'Vegtype EF' "
              "INNER JOIN 'Ecotype Crop Speciation' ON 'Vegtype EF'.[VegID] = 'Ecotype Crop Speciation'.[VegID] "
              "GROUP BY 'Ecotype Crop Speciation'.[EcoTypeID];")

    print("'Ecotype Crop EF' Table Created")


def grid_EF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'grid EF' AS SELECT 'grid growth form'.[gridID] AS [gridID], "
              "SUM([EcotypeFrac]*([TreeFrac]*[TreeEF]+[CropFrac]*[CropEF]+[HerbFrac]*[HerbEF]+[ShrubFrac]*[ShrubEF])) AS EF "
              "FROM 'grid growth form' "
              "INNER JOIN (((('Grid ecotype' "
              "INNER JOIN 'Ecotype Crop EF' ON 'Grid ecotype'.[EcotypeID] = 'Ecotype Crop EF'.[EcoTypeID]) "
              "INNER JOIN 'Ecotype Herb EF' ON 'Grid ecotype'.[EcotypeID] = 'Ecotype Herb EF'.[EcoTypeID]) "
              "INNER JOIN 'Ecotype Shrub EF' ON 'Grid ecotype'.[EcotypeID] = 'Ecotype Shrub EF'.[EcoTypeID]) "
              "INNER JOIN 'Ecotype Tree EF' ON 'Grid ecotype'.[EcotypeID] = 'Ecotype Tree EF'.[EcoTypeID]) "
              "ON 'grid growth form'.[gridID] = 'Grid ecotype'.[gridID] "
              "GROUP BY 'grid growth form'.[gridID];")

    print("'grid EF' Table Created\n")

    grid_EF_query_df = pd.read_sql_query("SELECT * FROM 'grid EF';", conn)

    return grid_EF_query_df


def make_grid_ef_tables(conn, grid_EF_csv_output, ClassID):
    classID_name = "Grid EF%s" % ClassID
    csv_grid_EF = pd.read_csv(grid_EF_csv_output)
    csv_grid_EF.to_sql(classID_name, conn, flavor='sqlite', if_exists='replace')
    print("'Grid EF%s' Table Loaded from: %s" % (ClassID, grid_EF_csv_output))


def concat_grid_ef_tables(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Grid EF All' "
              "AS SELECT DISTINCT 'grid growth form'.[gridID] AS [gridID], "
              "'Grid EF1'.[EF] AS [EF1], "
              "'Grid EF2'.[EF] AS [EF2], "
              "'Grid EF3'.[EF] AS [EF3], "
              "'Grid EF4'.[EF] AS [EF4], "
              "'Grid EF5'.[EF] AS [EF5], "
              "'Grid EF6'.[EF] AS [EF6], "
              "'Grid EF7'.[EF] AS [EF7], "
              "'Grid EF8'.[EF] AS [EF8], "
              "'Grid EF9'.[EF] AS [EF9], "
              "'Grid EF10'.[EF] AS [EF10], "
              "'Grid EF11'.[EF] AS [EF11], "
              "'Grid EF12'.[EF] AS [EF12], "
              "'Grid EF13'.[EF] AS [EF13], "
              "'Grid EF14'.[EF] AS [EF14], "
              "'Grid EF15'.[EF] AS [EF15], "
              "'Grid EF16'.[EF] AS [EF16], "
              "'Grid EF17'.[EF] AS [EF17], "
              "'Grid EF18'.[EF] AS [EF18], "
              "'Grid EF19'.[EF] AS [EF19], "
              "'Grid EF20'.[EF] AS [EF20] "
              "FROM 'grid growth form' "
              "LEFT JOIN 'Grid EF1' ON 'grid growth form'.[gridID] = 'Grid EF1'.[gridID] "
              "LEFT JOIN 'Grid EF2' ON 'grid growth form'.[gridID] = 'Grid EF2'.[gridID] "
              "LEFT JOIN 'Grid EF3' ON 'grid growth form'.[gridID] = 'Grid EF3'.[gridID] "
              "LEFT JOIN 'Grid EF4' ON 'grid growth form'.[gridID] = 'Grid EF4'.[gridID] "
              "LEFT JOIN 'Grid EF5' ON 'grid growth form'.[gridID] = 'Grid EF5'.[gridID] "
              "LEFT JOIN 'Grid EF6' ON 'grid growth form'.[gridID] = 'Grid EF6'.[gridID] "
              "LEFT JOIN 'Grid EF7' ON 'grid growth form'.[gridID] = 'Grid EF7'.[gridID] "
              "LEFT JOIN 'Grid EF8' ON 'grid growth form'.[gridID] = 'Grid EF8'.[gridID] "
              "LEFT JOIN 'Grid EF9' ON 'grid growth form'.[gridID] = 'Grid EF9'.[gridID] "
              "LEFT JOIN 'Grid EF10' ON 'grid growth form'.[gridID] = 'Grid EF10'.[gridID] "
              "LEFT JOIN 'Grid EF11' ON 'grid growth form'.[gridID] = 'Grid EF11'.[gridID] "
              "LEFT JOIN 'Grid EF12' ON 'grid growth form'.[gridID] = 'Grid EF12'.[gridID] "
              "LEFT JOIN 'Grid EF13' ON 'grid growth form'.[gridID] = 'Grid EF13'.[gridID] "
              "LEFT JOIN 'Grid EF14' ON 'grid growth form'.[gridID] = 'Grid EF14'.[gridID] "
              "LEFT JOIN 'Grid EF15' ON 'grid growth form'.[gridID] = 'Grid EF15'.[gridID] "
              "LEFT JOIN 'Grid EF16' ON 'grid growth form'.[gridID] = 'Grid EF16'.[gridID] "
              "LEFT JOIN 'Grid EF17' ON 'grid growth form'.[gridID] = 'Grid EF17'.[gridID] "
              "LEFT JOIN 'Grid EF18' ON 'grid growth form'.[gridID] = 'Grid EF18'.[gridID] "
              "LEFT JOIN 'Grid EF19' ON 'grid growth form'.[gridID] = 'Grid EF19'.[gridID] "
              "LEFT JOIN 'Grid EF20' ON 'grid growth form'.[gridID] = 'Grid EF20'.[gridID];")

    Grid_EF_All_query_df = pd.read_sql_query("SELECT * FROM 'Grid EF All';", conn)

    return Grid_EF_All_query_df


def run_M3GEFP_DB(db_connection, output_csv_path):
    """
    Function to create M3GEFP database and output the Grid EF table as a CSV
    :param db_connection: Database connection
    :param output_csv_path: Path to CSV output
    :return: A SQLite database and copy of the grid EF table as a CSV file
    """
    # Queries need to be executed in specific order
    # due to dependency of tables generated from previous queries
    print("\n BEGINNING M3GEFP DB GENERATION")
    Ecotype_Tree_EF(db_connection)
    Ecotype_Shrub_EF(db_connection)
    Ecotype_Herb_EF(db_connection)
    Ecotype_Crop_EF(db_connection)
    grid_EF_output = grid_EF(db_connection)

    grid_EF_output.to_csv(output_csv_path, index=False)  # Save EF zone table to CSV
    print("grid EF Table CSV Generated: %s" % output_csv_path)
