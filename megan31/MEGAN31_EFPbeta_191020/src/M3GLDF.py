#!/usr/bin/env python
"""
Module that contains functions related to creating the Grid LDF database

Functions include
    run_M3GEFP_DB: Executes the functions and queries to generate the database output for each class
    make_M3GEFP_tables: Create tables based on input CSVs
    Ecotype_*_EF: SQL queries to run the database for the given vegetative class
    make_grid_ldf_tables: Load the individual classes back into the database
    concat_grid_ldf_tables: Concatenate the individual classes into 1 table

"""
import pandas as pd


def make_M3GLDF_tables(conn, csv_input_dir, Ecotype_Crop, Ecotype_Shrub, Ecotype_Herb,
                       Ecotype_Tree, grid_ecotype, grid_growth_form, Vegtype_LDF_csv_input):

    """

    Function to load CSV inputs to create primary tables of the M3GEFP database
    :param conn: SQLite database connection
    :param csv_input_dir: Directory of CSV inputs
    :param Ecotype_Crop: input csv file name
    :param Ecotype_Shrub: input csv file name
    :param Ecotype_Herb: input csv file name
    :param Ecotype_Tree: input csv file name
    :param grid_ecotype: input csv file name
    :param grid_growth_form: input csv file name
    :param Vegtype_LDF_csv_input: Input CSVs generated by running the M3LDF database
    :return: A SQLite database with primary tables

    """

    print("Creating M3GEFP DB tables from: %s\n" % csv_input_dir)
    csv_Ecotype_Crop_Speciation = pd.read_csv(csv_input_dir + Ecotype_Crop)
    csv_Ecotype_Shrub_Speciation = pd.read_csv(csv_input_dir + Ecotype_Shrub)
    csv_Ecotype_Herb_Speciation = pd.read_csv(csv_input_dir + Ecotype_Herb)
    csv_Ecotype_Tree_Speciation = pd.read_csv(csv_input_dir + Ecotype_Tree)
    csv_grid_ecotype = pd.read_csv(csv_input_dir + grid_ecotype)
    csv_grid_growth_form = pd.read_csv(csv_input_dir + grid_growth_form)
    csv_Vegtype_LDF = pd.read_csv(Vegtype_LDF_csv_input)
    csv_Vegtype_LDF.columns = ['VegID', 'VegLDF']

    csv_Ecotype_Crop_Speciation.to_sql("Ecotype Crop Speciation", conn, flavor='sqlite', if_exists='replace')
    print("'Ecotype Crop Speciation' Table Loaded from: %s" % csv_input_dir + Ecotype_Crop)

    csv_Ecotype_Shrub_Speciation.to_sql("Ecotype Shrub Speciation", conn, flavor='sqlite', if_exists='replace')
    print("'Ecotype Shrub Speciation' Table Loaded from: %s" % csv_input_dir + Ecotype_Shrub)

    csv_Ecotype_Herb_Speciation.to_sql("Ecotype Herb Speciation", conn, flavor='sqlite', if_exists='replace')
    print("'Ecotype Herb Speciation' Table Loaded from: %s" % csv_input_dir + Ecotype_Herb)

    csv_Ecotype_Tree_Speciation.to_sql("Ecotype Tree Speciation", conn, flavor='sqlite', if_exists='replace')
    print("'Ecotype Tree Speciation' Table Loaded from: %s" % csv_input_dir + Ecotype_Tree)

    csv_grid_ecotype.to_sql("grid ecotype", conn, flavor='sqlite', if_exists='replace')
    print("'grid ecotype' Table Loaded from: %s" % csv_input_dir + grid_ecotype)

    csv_grid_growth_form.to_sql("grid growth form", conn, flavor='sqlite', if_exists='replace')
    print("'grid growth form' Table Loaded from: %s" % csv_input_dir + grid_growth_form)

    csv_Vegtype_LDF.to_sql("Vegtype LDF", conn, flavor='sqlite', if_exists='replace')
    print("'Vegtype LDF' Table Loaded from: %s" % Vegtype_LDF_csv_input)


def Ecotype_Tree_LDF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Ecotype Tree LDF' AS SELECT 'Ecotype Tree Speciation'.[EcoTypeID] AS [EcoTypeID], "
              "SUM([TreeSpecFrac]*[VegLDF]) AS TreeLDF "
              "FROM 'Ecotype Tree Speciation' "
              "INNER JOIN 'Vegtype LDF' ON 'Ecotype Tree Speciation'.[VegID] = 'Vegtype LDF'.[VegID] "
              "GROUP BY 'Ecotype Tree Speciation'.[EcoTypeID];")

    print("'Ecotype Tree LDF' Table Created")


def Ecotype_Shrub_LDF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Ecotype Shrub LDF' AS SELECT 'Ecotype Shrub Speciation'.[EcoTypeID] AS [EcoTypeID], "
              "SUM([ShrubSpecFrac]*[VegLDF]) AS ShrubLDF "
              "FROM 'Ecotype Shrub Speciation' "
              "INNER JOIN 'Vegtype LDF' ON 'Ecotype Shrub Speciation'.[VegID] = 'Vegtype LDF'.[VegID] "
              "GROUP BY 'Ecotype Shrub Speciation'.[EcoTypeID];")

    print("'Ecotype Shrub LDF' Table Created")


def Ecotype_Herb_LDF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Ecotype Herb LDF' AS SELECT 'Ecotype Herb Speciation'.[EcoTypeID] AS [EcoTypeID], "
              "SUM([HerbSpecFrac]*[VegLDF]) AS HerbLDF "
              "FROM 'Ecotype Herb Speciation' "
              "INNER JOIN 'Vegtype LDF' ON 'Ecotype Herb Speciation'.[VegID] = 'Vegtype LDF'.[VegID] "
              "GROUP BY 'Ecotype Herb Speciation'.[EcoTypeID];")

    print("'Ecotype Herb LDF' Table Created")


def Ecotype_Crop_LDF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Ecotype Crop LDF' AS SELECT 'Ecotype Crop Speciation'.[EcoTypeID] AS [EcoTypeID], "
              "Sum([CropSpecFrac]*[VegLDF]) AS CropLDF FROM 'Vegtype LDF' "
              "INNER JOIN 'Ecotype Crop Speciation' ON 'Vegtype LDF'.[VegID] = 'Ecotype Crop Speciation'.[VegID] "
              "GROUP BY 'Ecotype Crop Speciation'.[EcoTypeID];")

    print("'Ecotype Crop LDF' Table Created")


def grid_LDF(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'grid LDF' AS SELECT 'grid growth form'.[gridID] AS [gridID], "
              "SUM([EcotypeFrac]*([TreeFrac]*[TreeLDF]+[CropFrac]*[CropLDF]+[HerbFrac]*[HerbLDF]+[ShrubFrac]*[ShrubLDF])/([TreeFrac]+[CropFrac]+[HerbFrac]+[ShrubFrac]+.00000001)) AS LDF "
              "FROM 'grid growth form' "
              "INNER JOIN (((('Grid ecotype' "
              "INNER JOIN 'Ecotype Crop LDF' ON 'Grid ecotype'.[EcotypeID] = 'Ecotype Crop LDF'.[EcoTypeID]) "
              "INNER JOIN 'Ecotype Herb LDF' ON 'Grid ecotype'.[EcotypeID] = 'Ecotype Herb LDF'.[EcoTypeID]) "
              "INNER JOIN 'Ecotype Shrub LDF' ON 'Grid ecotype'.[EcotypeID] = 'Ecotype Shrub LDF'.[EcoTypeID]) "
              "INNER JOIN 'Ecotype Tree LDF' ON 'Grid ecotype'.[EcotypeID] = 'Ecotype Tree LDF'.[EcoTypeID]) "
              "ON 'grid growth form'.[gridID] = 'Grid ecotype'.[gridID] "
              "GROUP BY 'grid growth form'.[gridID];")


    print("'grid LDF' Table Created\n")

    grid_LDF_query_df = pd.read_sql_query("SELECT * FROM 'grid LDF';", conn)

    return grid_LDF_query_df


def make_grid_ldf_tables(conn, grid_LDF_csv_output, ClassID):
    classID_name = "Grid LDF%s" % ClassID
    csv_grid_LDF = pd.read_csv(grid_LDF_csv_output)
    csv_grid_LDF.to_sql(classID_name, conn, flavor='sqlite', if_exists='replace')
    print("'Grid LDF%s' Table Loaded from: %s" % (ClassID, grid_LDF_csv_output))


def concat_grid_ldf_tables(conn):
    c = conn.cursor()
    c.execute("CREATE TABLE 'Grid LDF All' "
              "AS SELECT DISTINCT 'grid growth form'.[gridID] AS [gridID], "
              "'Grid LDF1'.[LDF] AS [LDF1], "
              "'Grid LDF2'.[LDF] AS [LDF2], "
              "'Grid LDF3'.[LDF] AS [LDF3], "
              "'Grid LDF4'.[LDF] AS [LDF4], "
              "'Grid LDF5'.[LDF] AS [LDF5], "
              "'Grid LDF6'.[LDF] AS [LDF6], "
              "'Grid LDF7'.[LDF] AS [LDF7], "
              "'Grid LDF8'.[LDF] AS [LDF8], "
              "'Grid LDF9'.[LDF] AS [LDF9], "
              "'Grid LDF10'.[LDF] AS [LDF10], "
              "'Grid LDF11'.[LDF] AS [LDF11], "
              "'Grid LDF12'.[LDF] AS [LDF12], "
              "'Grid LDF13'.[LDF] AS [LDF13], "
              "'Grid LDF14'.[LDF] AS [LDF14], "
              "'Grid LDF15'.[LDF] AS [LDF15], "
              "'Grid LDF16'.[LDF] AS [LDF16], "
              "'Grid LDF17'.[LDF] AS [LDF17], "
              "'Grid LDF18'.[LDF] AS [LDF18], "
              "'Grid LDF19'.[LDF] AS [LDF19], "
              "'Grid LDF20'.[LDF] AS [LDF20] "
              "FROM 'grid growth form' "
              "LEFT JOIN 'Grid LDF1' ON 'grid growth form'.[gridID] = 'Grid LDF1'.[gridID] "
              "LEFT JOIN 'Grid LDF2' ON 'grid growth form'.[gridID] = 'Grid LDF2'.[gridID] "
              "LEFT JOIN 'Grid LDF3' ON 'grid growth form'.[gridID] = 'Grid LDF3'.[gridID] "
              "LEFT JOIN 'Grid LDF4' ON 'grid growth form'.[gridID] = 'Grid LDF4'.[gridID] "
              "LEFT JOIN 'Grid LDF5' ON 'grid growth form'.[gridID] = 'Grid LDF5'.[gridID] "
              "LEFT JOIN 'Grid LDF6' ON 'grid growth form'.[gridID] = 'Grid LDF6'.[gridID] "
              "LEFT JOIN 'Grid LDF7' ON 'grid growth form'.[gridID] = 'Grid LDF7'.[gridID] "
              "LEFT JOIN 'Grid LDF8' ON 'grid growth form'.[gridID] = 'Grid LDF8'.[gridID] "
              "LEFT JOIN 'Grid LDF9' ON 'grid growth form'.[gridID] = 'Grid LDF9'.[gridID] "
              "LEFT JOIN 'Grid LDF10' ON 'grid growth form'.[gridID] = 'Grid LDF10'.[gridID] "
              "LEFT JOIN 'Grid LDF11' ON 'grid growth form'.[gridID] = 'Grid LDF11'.[gridID] "
              "LEFT JOIN 'Grid LDF12' ON 'grid growth form'.[gridID] = 'Grid LDF12'.[gridID] "
              "LEFT JOIN 'Grid LDF13' ON 'grid growth form'.[gridID] = 'Grid LDF13'.[gridID] "
              "LEFT JOIN 'Grid LDF14' ON 'grid growth form'.[gridID] = 'Grid LDF14'.[gridID] "
              "LEFT JOIN 'Grid LDF15' ON 'grid growth form'.[gridID] = 'Grid LDF15'.[gridID] "
              "LEFT JOIN 'Grid LDF16' ON 'grid growth form'.[gridID] = 'Grid LDF16'.[gridID] "
              "LEFT JOIN 'Grid LDF17' ON 'grid growth form'.[gridID] = 'Grid LDF17'.[gridID] "
              "LEFT JOIN 'Grid LDF18' ON 'grid growth form'.[gridID] = 'Grid LDF18'.[gridID] "
              "LEFT JOIN 'Grid LDF19' ON 'grid growth form'.[gridID] = 'Grid LDF19'.[gridID] "
              "LEFT JOIN 'Grid LDF20' ON 'grid growth form'.[gridID] = 'Grid LDF20'.[gridID];")

    Grid_LDF_All_query_df = pd.read_sql_query("SELECT * FROM 'Grid LDF All';", conn)

    return Grid_LDF_All_query_df


def run_M3GLDF_DB(db_connection, output_csv_path):
    """
    Function to create M3GLDF database and output the Grid LDF table as a CSV
    :param db_connection: Database connection
    :param output_csv_path: Path to CSV output
    :return: A SQLite database and copy of the grid LDF table as a CSV file
    """
    # Queries need to be executed in specific order
    # due to dependency of tables generated from previous queries
    print("\n BEGINNING M3GLDF DB GENERATION")
    Ecotype_Tree_LDF(db_connection)
    Ecotype_Shrub_LDF(db_connection)
    Ecotype_Herb_LDF(db_connection)
    Ecotype_Crop_LDF(db_connection)
    grid_LDF_output = grid_LDF(db_connection)

    grid_LDF_output.to_csv(output_csv_path, index=False)  # Save LDF zone table to CSV
    print("grid LDF Table CSV Generated: %s" % output_csv_path)
